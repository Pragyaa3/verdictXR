type Trial = 
 record {
   aiVerdict: opt text;
   caseDetails: opt text;
   caseTitle: text;
   createdAt: int;
   defendant: opt principal;
   evidence: vec Evidence;
   id: nat;
   judge: opt principal;
   log: vec Message;
   observers: vec principal;
   participants: vec Participant;
   plaintiff: opt principal;
   status: text;
   verdict: opt text;
 };
type Participant = 
 record {
   joinedAt: int;
   "principal": principal;
   role: text;
 };
type Message = 
 record {
   content: text;
   role: text;
   sender: principal;
   timestamp: int;
 };
type Evidence = 
 record {
   description: text;
   id: nat;
   timestamp: int;
   uploader: principal;
   url: text;
 };
service : {
  createTrial: (principal, text) -> (nat);
  generateInviteCode: (nat) -> (opt text);
  getTrial: (nat) -> (opt Trial) query;
  getTrialFromCode: (text) -> (opt Trial) query;
  getTrialStats: () ->
   (record {
      closedTrials: nat;
      openTrials: nat;
      totalEvidence: nat;
    }) query;
  getTrialsByParticipant: (principal) -> (vec Trial) query;
  joinTrial: (nat, principal, text) -> (bool);
  joinTrialWithCode: (text, principal, text) -> (bool);
  listTrials: () -> (vec Trial) query;
  postMessage: (nat, text, text) -> (bool);
  setAIVerdict: (nat, text) -> (bool);
  setCaseDetails: (nat, text) -> (bool);
  setCaseTitle: (nat, text) -> (bool);
  setVerdict: (nat, text) -> (bool);
  submitEvidence: (nat, text, text, principal) -> (bool);
}
